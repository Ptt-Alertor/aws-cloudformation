AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Host

Parameters:
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group for docker deployment
      VpcId:
        Fn::ImportValue: VPC-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "1"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: s3ConfigReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::ptt-alertor-2020-bucket
                  - arn:aws:s3:::ptt-alertor-2020-bucket/*
                Sid: ConfigReadAccess
        - PolicyName: ecsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: t3.micro
      KeyName: ecs
      SecurityGroups:
        - !Ref SecurityGroup
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref IamInstanceProfile
      UserData:
        Fn::Base64: !Sub
          - |
            #!bin/bash -xe
            echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
            yum install -y aws-cli
            aws s3 cp s3://${ConfigBucket}/.env.prod /etc/ecs/.env
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum install -y redis
            yum update -y
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_12.x | sudo -E bash -
            yum install -y nodejs
            yum install -y wget
            wget http://download.redis.io/redis-stable.tar.gz && tar xvzf redis-stable.tar.gz && cd redis-stable && make
            npm install redis-dump -g
            yum erase ntp*
            yum -y install chrony
            service chronyd start
          - Cluster:
              Fn::ImportValue: ECS-Cluster
            ConfigBucket:
              Fn::ImportValue: Ptt-Alertor-S3-Bucket-Name

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ECS-Hosts-AutoScalingGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      AvailabilityZones:
        - Fn::ImportValue: VPC-AvailabilityZone-A
        - Fn::ImportValue: VPC-AvailabilityZone-B
        - Fn::ImportValue: VPC-AvailabilityZone-C
      VPCZoneIdentifier:
        - Fn::ImportValue: VPC-PublicSubnet-A
        - Fn::ImportValue: VPC-PublicSubnet-B
        - Fn::ImportValue: VPC-PublicSubnet-C
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 30
      HealthCheckType: EC2
      Tags:
        - Key: Name
          Value: ECS-host
          PropagateAtLaunch: true
        - Key: ImageId
          Value: !Ref ECSAMI
          PropagateAtLaunch: true
      TerminationPolicies:
        - OldestInstance

Outputs:
  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Description: Name of Auto Scaling Group
    Export:
      Name: ECS-hosts-Auto-Scaling-Group
